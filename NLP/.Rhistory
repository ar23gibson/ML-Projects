install.packages("SnowballC")
reviews <- read.csv(".../data/deceptive-opinion.csv")
setwd("~/GitHub/ML-Projects/NLP")
reviews <- read.csv(".../data/deceptive-opinion.csv")
reviews <- read.csv("../data/deceptive-opinion.csv")
reviews <- read.csv("C:/Users/andrew.gibson/Documents/GitHub/ML-Projects/NLP/data/deceptive-opinion.csv")
Corpus <- Corpus(VectorSource(input_text)) # defines corpus like object
library(tidyverse) # general utility & workflow functions
library(tidytext) # tidy implimentation of NLP methods
library(topicmodels) # for LDA topic modelling
library(tm) # general text mining functions, making document term matrixes
library(SnowballC) # for stemming
Corpus <- Corpus(VectorSource(input_text)) # defines corpus like object
top_terms_by_topic_LDA <- function(input_text, plot =T, number_of_topics =4)
{
Corpus <- Corpus(VectorSource(input_text)) # defines corpus like object
DTM <- DocumentTermMatrix(Corpus) #get count of words/document
# perform LDA and store words in tidytext format
lda <- LDA(DTM, k = number_of_topics, control = list(seed = 1234))
topics <- tidy(lsa, matrix = "beta")
# find top terms for each topic
top_terms <- topics %>% # take topics data frame (topics is a function - try)
group_by(topic) %>% # treat each topic as a different group
top_n(10, beta) %>% # get the top 10 most informative words
ungroup() %>% # ungroup, why?
arrange(topic, -beta) # arrange words in descending informativeness
# if user asks for plot (true by default) plot top ten terms in order
if(plot == T)
{
top_terms %>% #take top ten terms
mutate(term = reorder(term, beta)) %>% #sort terms by beta value
#mutate = creates columns of existing variables
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) + #barplot
facet_wrap(~ topic, scales = "free") + #each topic in seperate plot
labs(x=null, y= "Beta") + #no x label, change y
coord_flip() # turns bars horizontal
}else{
#if the plot == False, return a list
return(top_terms)
}
}
top_terms_by_topic_LDA(reviews$text, number_of_topics = 2)
#function takes column; returns plot; looks for 4 topics
top_terms_by_topic_LDA <- function(input_text, plot =T, number_of_topics =4)
{
Corpus <- Corpus(VectorSource(input_text)) # defines corpus like object
DTM <- DocumentTermMatrix(Corpus) #get count of words/document
# perform LDA and store words in tidytext format
lda <- LDA(DTM, k = number_of_topics, control = list(seed = 1234))
topics <- tidy(lda, matrix = "beta")
# remove any empty rows in our document term matrix (if there are any
# we'll get an error when we try to run our LDA)
unique_indexes <- unique(DTM$i) # get the index of each unique value
DTM <- DTM[unique_indexes,] # get a subset of only those indexes
# find top terms for each topic
top_terms <- topics %>% # take topics data frame (topics is a function - try)
group_by(topic) %>% # treat each topic as a different group
top_n(10, beta) %>% # get the top 10 most informative words
ungroup() %>% # ungroup, why?
arrange(topic, -beta) # arrange words in descending informativeness
# if user asks for plot (true by default) plot top ten terms in order
if(plot == T)
{
top_terms %>% #take top ten terms
mutate(term = reorder(term, beta)) %>% #sort terms by beta value
#mutate = creates columns of existing variables
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) + #barplot
facet_wrap(~ topic, scales = "free") + #each topic in seperate plot
labs(x=null, y= "Beta") + #no x label, change y
coord_flip() # turns bars horizontal
}else{
#if the plot == False, return a list
return(top_terms)
}
}
top_terms_by_topic_LDA(reviews$text, number_of_topics = 2)
#function takes column; returns plot; looks for 4 topics
top_terms_by_topic_LDA <- function(input_text, plot =T, number_of_topics =4)
{
Corpus <- Corpus(VectorSource(input_text)) # defines corpus like object
DTM <- DocumentTermMatrix(Corpus) #get count of words/document
# perform LDA and store words in tidytext format
lda <- LDA(DTM, k = number_of_topics, control = list(seed = 1234))
topics <- tidy(lda, matrix = "beta")
# remove any empty rows in our document term matrix (if there are any
# we'll get an error when we try to run our LDA)
unique_indexes <- unique(DTM$i) # get the index of each unique value
DTM <- DTM[unique_indexes,] # get a subset of only those indexes
# find top terms for each topic
top_terms <- topics %>% # take topics data frame (topics is a function - try)
group_by(topic) %>% # treat each topic as a different group
top_n(10, beta) %>% # get the top 10 most informative words
ungroup() %>% # ungroup, why?
arrange(topic, -beta) # arrange words in descending informativeness
# if user asks for plot (true by default) plot top ten terms in order
if(plot == T)
{
top_terms %>% #take top ten terms
mutate(term = reorder(term, beta)) %>% #sort terms by beta value
#mutate = creates columns of existing variables
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) + #barplot
facet_wrap(~ topic, scales = "free") + #each topic in seperate plot
labs(x=null, y= "Beta") + #no x label, change y
coord_flip() # turns bars horizontal
}else{
#if the plot == False, return a list
return(top_terms)
}
}
top_terms_by_topic_LDA(reviews$text, number_of_topics = 2)
setwd("~/GitHub/ML-Projects/NLP")
setwd("~/GitHub/H1387-veltassa-diamond-study")
View(reviews)
View(top_terms_by_topic_LDA)
rm(reviews)
rm(top_terms_by_topic_LDA())
rm(top_terms_by_topic_LDA
rm(top_terms_by_topic_LDA)
rm(top_terms_by_topic_LDA)
sensitive_data_loc_adsl <- file.path("T:", "H1387", "May2023", "20220228_PAT-CR-302_DEID_DATA", "ADAM_csv", 'adsl.csv')
adsl_dataSet <- read.csv(sensitive_data_loc_adsl)
View(adsl_dataSet)
length(adsl_dataSet)
nrow(adsl_dataSet)
library(dplyr)
no_participants %>%
group_by(adsl_dataSet$USUBJID)
newx <- adsl_dataSet %>%
group_by(adsl_dataSet$USUBJID)
newx <- adsl_dataSet %>%
group_by(adsl_dataSet$USUBJID) %>%
summarise(count=n())
newx
no_participants <- adsl_dataSet %>%
group_by(adsl_dataSet$USUBJID) %>%
summarise(count=n())
rm(newx)
no_participants <- nrow(adsl_dataSet %>%
group_by(adsl_dataSet$USUBJID) %>%
summarise(count=n()))
no_participants
no_Patiromer <- adsl_dataSet[adsl_dataSet$ACTARM == 'Patiromer',]
nrow(no_Patiromer)
no_patiromer <- adsl_dataSet[adsl_dataSet$ACTARM == 'Patiromer',]
no_control <- adsl_dataSet[adsl_dataSet$ACTARM == 'Patiromer',]
no_patiromer <- adsl_dataSet[adsl_dataSet$ACTARM == 'Patiromer',]
no_placebo <- adsl_dataSet[adsl_dataSet$ACTARM == 'Placebo',]
nrow(no_placebo)
nrow(no_patiromer)
rm(no_Patiromer)
rm(no_control)
# patient ages; under and over 65 and mean
age_under65 <- no_patiromer[no_patiromer$AGEGR1 == '< 65',]
age_under65
age_overandequal65 <- no_patiromer[no_patiromer$AGEGR1 == '>= 65',]
age_overandequal65
age_under65_pat <- no_patiromer[no_patiromer$AGEGR1 == '< 65',]
age_overandequal65_pat <- no_patiromer[no_patiromer$AGEGR1 == '>= 65',]
age_under65_plac <- no_placebo[no_placebo$AGEGR1 == '< 65',]
rm(age_under65)
age_mean_Pat <- mean(no_patiromer$AGE)
age_mean_pat <- mean(no_patiromer$AGE)
age_mean_plac <- mean(no_placebo$AGE)
rm(age_mean_Pat)
# no of patients of each sex
sex_male <- no_patiromer[no_patiromer$SEX == 'Male',]
sex_male_pat <- no_patiromer[no_patiromer$SEX == 'Male',]
sex_female_pat <- no_patiromer[no_patiromer$SEX == 'Female',]
patiromer <- adsl_dataSet[adsl_dataSet$ACTARM == 'Patiromer',]
placebo <- adsl_dataSet[adsl_dataSet$ACTARM == 'Placebo',]
View(no_patiromer)
no_patiromer <- nrow(patiromer)
no_placebo <- nrow(placebo)
no_age_overandequal65_pat <- nrow(age_overandequal65_pat)
no_age_under65_pat <- nrow(age_under65_pat)
no_age_overandequal65_pat <- nrow(age_overandequal65_pat)
rm(no_participants)
age_under65_plac <- placebo[placebo$AGEGR1 == '< 65',]
age_overandequal65_plac <- placebo[placebo$AGEGR1 == '>= 65',]
no_age_under65_plac <- nrow(age_under65_plac)
no_age_overandequal65_plac <- nrow(age_overandequal65_plac)
View(sex_male)
sex_male_pat <- patiromer[patiromer$SEX == 'Male',]
sex_female_pat <- patiromer[patiromer$SEX == 'Female',]
sex_male_pat <- patiromer[patiromer$SEX == 'M',]
sex_female_pat <- patiromer[patiromer$SEX == 'F',]
sex_male_pat <- patiromer[patiromer$SEX == 'M',]
sex_female_pat <- patiromer[patiromer$SEX == 'F',]
no_sex_male_pat <- nrow(sex_male_pat)
no_sex_female_pat <- nrow(sex_female_pat)
sex_male_plac <- placebo[placebo$SEX == 'M',]
sex_female_plac <- placebo[placebo$SEX == 'F',]
no_sex_male_plac <- nrow(sex_male_pat)
no_sex_female_plac <- nrow(sex_female_pat)
# patients of each race
race_white_male_pat <- patiromer[patiromer$RACEN == 5,]
race_white_male_pat
race_black_pat <- patiromer[patiromer$RACEN == 2,]
race_black_pat
race_black_pat <- patiromer[patiromer$RACEN == 3,]
race_black_pat <- patiromer[patiromer$RACEN == 3,]
race_black_pat
race_white_pat <- patiromer[patiromer$RACEN == 5,]
race_na_pat <- patiromer[patiromer$RACEN == 4,]
race_black_pat <- patiromer[patiromer$RACEN == 3,]
race_asian_pat <- patiromer[patiromer$RACEN == 2,]
race_amIndian_pat <- patiromer[patiromer$RACEN == 1,]
race_na_pat
no_race_white_pat <- nrow(race_white_pat)
no_race_black_pat <- nrow(race_black_pat)
no_race_amIndian_pat <- nrow(race_amIndian_pat)
rm(race_na_pat)
rm(race_asian_pat)
race_white_plac <- placebo[placebo$RACEN == 5,]
race_black_plac <- placebo[placebo$RACEN == 3,]
race_amIndian_plac <- placebo[placebo$RACEN == 1,]
no_race_white_pat <- nrow(race_white_plac)
no_race_black_pat <- nrow(race_black_plac)
no_race_amIndian_pat <- nrow(race_amIndian_plac)
patiromer %>%
group_by(patiromer$ETHNGR1) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$ETHNIC) %>%
summarise(count=n())
test <- patiromer %>%
group_by(patiromer$ETHNIC) %>%
summarise(count=n())
test[1]
test
test[1,1]
test[2,1]
test[1,2]
patiromer %>%
group_by(patiromer$ETHNIC) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$ETHNICN) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$ETHNICN, patiromer$ETHNIC) %>%
summarise(count=n())
patiromer
patiromer %>%
group_by(placebo$RACE, placebo$RACEN) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$RACE, patiromer$RACEN) %>%
summarise(count=n())
no_race_other_pat <- nrow(race_other_pat)
race_other_pat <- patiromer[patiromer$RACEN == 6,]
no_race_other_pat <- nrow(race_other_pat)
race_amIndian_pat <- patiromer[patiromer$RACEN == 1,]
race_black_pat <- patiromer[patiromer$RACEN == 3,]
race_white_pat <- patiromer[patiromer$RACEN == 5,]
race_other_pat <- patiromer[patiromer$RACEN == 6,]
no_race_amIndian_pat <- nrow(race_amIndian_pat)
no_race_black_pat <- nrow(race_black_pat)
no_race_white_pat <- nrow(race_white_pat)
no_race_other_pat <- nrow(race_other_pat)
race_amIndian_plac <- placebo[placebo$RACEN == 1,]
race_black_plac <- placebo[placebo$RACEN == 3,]
race_white_plac <- placebo[placebo$RACEN == 5,]
race_other_pat <- placebo[placebo$RACEN == 6,]
no_race_amIndian_plac <- nrow(race_amIndian_plac)
no_race_black_plac <- nrow(race_black_plac)
no_race_white_plac <- nrow(race_white_plac)
no_race_other_plac <- nrow(race_other_plac)
race_other_plac <- placebo[placebo$RACEN == 6,]
no_race_other_plac <- nrow(race_other_plac)
patiromer %>%
group_by(placebo$ETHNICN, placebo$ETHNIC) %>%
summarise(count=n())
ethin_hisp_plac <- placebo[placebo$ETHNICN == 1,]
ethin_nothisp_plac <- placebo[placebo$ETHNICN == 2,]
ethin_na_plac <- placebo[placebo$ETHNICN == 3,]
no_ethin_hisp_plac <- nrow(ethin_hisp_plac)
no_ethin_nothisp_plac <- nrow(ethin_nothisp_plac)
no_ethin_na_plac <- nrow(ethin_na_plac)
ethin_hisp_plac <- placebo[placebo$ETHNICN == 1,]
ethin_nothisp_plac <- placebo[placebo$ETHNICN == 2,]
ethin_na_plac <- placebo[placebo$ETHNICN == 4,]
no_ethin_hisp_plac <- nrow(ethin_hisp_plac)
no_ethin_nothisp_plac <- nrow(ethin_nothisp_plac)
no_ethin_na_plac <- nrow(ethin_na_plac)
ethin_hisp_pat <- patiromer[patiromer$ETHNICN == 1,]
ethin_nothisp_pat <- patiromer[patiromer$ETHNICN == 2,]
ethin_na_pat <- patiromer[patiromer$ETHNICN == 4,]
no_ethin_hisp_pat <- nrow(ethin_hisp_pat)
no_ethin_nothisp_pat <- nrow(ethin_nothisp_pat)
no_ethin_na_pat <- nrow(ethin_na_pat)
patiromer %>%
group_by(patiromer$ETHNICN, patiromer$ETHNIC) %>%
summarise(count=n())
ethin_hisp_pat <- patiromer[patiromer$ETHNICN == 1,]
ethin_nothisp_pat <- patiromer[patiromer$ETHNICN == 2,]
ethin_na_pat <- patiromer[patiromer$ETHNICN == 3,]
no_ethin_hisp_pat <- nrow(ethin_hisp_pat)
no_ethin_nothisp_pat <- nrow(ethin_nothisp_pat)
no_ethin_na_pat <- nrow(ethin_na_pat)
rm(sex_male)
patiromer %>%
group_by(patiromer$REGION2N, patiromer$REGION2) %>%
summarise(count=n())
region_nAm_pat <- patiromer[patiromer$REGION2N == 1,]
region_latAm_pat <- patiromer[patiromer$REGION2N == 2,]
region_wEur_pat <- patiromer[patiromer$REGION2N == 3,]
region_eEur_pat <- patiromer[patiromer$REGION2N == 4,]
sd()
no_region_nAm_pat <- nrow(region_nAm_pat)
no_region_latAm_pat <- nrow(region_latAm_pat)
no_region_wEur_pat <- nrow(region_wEur_pat)
no_region_eEur_pat <- nrow(region_eEur_pat)
region_nAm_plac <- placebo[placebo$REGION2N == 1,]
region_latAm_plac <- placebo[placebo$REGION2N == 2,]
region_wEur_plac <- placebo[placebo$REGION2N == 3,]
region_eEur_plac <- placebo[patiromer$REGION2N == 4,]
no_region_nAm_pat <- nrow(region_nAm_plac)
no_region_latAm_pat <- nrow(region_latAm_plac)
no_region_wEur_pat <- nrow(region_wEur_plac)
no_region_eEur_pat <- nrow(region_eEur_plac)
bmi_pat <- mean(patiromer$BMIBL)
bmi_pat
bmi_mean_pat <- mean(patiromer$BMIBL)
bmi_std_pat <- sd(patiromer$BMIBL)
bmi_mean_plac <- mean(placebo$BMIBL)
bmi_std_plac <- sd(placebo$BMIBL)
rm(bmi_pat)
patiromer$SNTPBNP
patiromer$SNTPBNPN
patiromer$SNTPBNP
patiromer$SNTPBNP
patiromer$SNTPBNPN
patiromer$SCNTPBNP
median(patiromer$SCNTPBNP)
median(patiromer$SCNTPBNP, na.rm = FALSE)
class(patiromer$SCNTPBNP)
mean(patiromer$SCNTPBNP)
mean(placebo$BMIBL)
placebo$BMIBL
class(patiromer$SCNTPBNP)
class(placebo$BMIBL)
patiromer$SCNTPBNP
mean(patiromer$SCNTPBNP)
newVector <- patiromer$SCNTPBNP
patiromer$SNTPBNP
patiromer$SNTPBNPN
mean(newVector)
median(newVector, na.rm = TRUE)
max(patiromer$SCNTPBNP, na.rm = TRUE)
patiromer %>%
group_by(patiromer$BLCKDC1, patiromer$BLCKDC2) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$BLCKDSTC, patiromer$BLCKDSTN) %>%
summarise(count=n())
CKD1_pat <- patiromer[patiromer$BLCKDSTN, ]
CKD1_pat <- patiromer[patiromer$BLCKDSTN == 1, ]
patiromer %>%
group_by(patiromer$BLCKDSTC, patiromer$BLCKDSTN) %>%
summarise(count=n())
CKD1_pat <- patiromer[patiromer$BLCKDSTN == 1, ]
CKD2_pat <- patiromer[patiromer$BLCKDSTN == 2, ]
CKD3a_pat <- patiromer[patiromer$BLCKDSTN == 3, ]
CKD3b_pat <- patiromer[patiromer$BLCKDSTN == 4, ]
CKD4_pat <- patiromer[patiromer$BLCKDSTN == 5, ]
CKD5_pat <- patiromer[patiromer$BLCKDSTN == 6, ]
no_CKD1_pat <- nrow(CKD1_pat)
no_CKD1_pat <- nrow(CKD1_pat)
no_CKD2_pat <- nrow(CKD2_pat)
no_CKD3a_pat <- nrow(CKD3a_pat)
no_CKD3b_pat <- nrow(CKD3b_pat)
no_CKD4_pat <- nrow(CKD4_pat)
no_CKD5_pat <- nrow(CKD5_pat)
CKD1_plac <- placebo[placebo$BLCKDSTN == 1, ]
CKD2_plac <- placebo[placebo$BLCKDSTN == 2, ]
CKD3a_plac <- placebo[placebo$BLCKDSTN == 3, ]
CKD3b_plac <- placebo[placebo$BLCKDSTN == 4, ]
CKD4_plac <- placebo[placebo$BLCKDSTN == 5, ]
CKD5_plac <- placebo[placebo$BLCKDSTN == 6, ]
no_CKD1_plac <- nrow(CKD1_plac)
no_CKD2_plac <- nrow(CKD2_plac)
no_CKD3a_plac <- nrow(CKD3a_plac)
no_CKD3b_plac <- nrow(CKD3b_plac)
no_CKD4_plac <- nrow(CKD4_plac)
no_CKD5_plac <- nrow(CKD5_plac)
patiromer %>%
group_by(patiromer$BLNYHA, patiromer$BLNYHAG, patiromer$BLNYHAGN) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$BLNYHA, patiromer$BLNYHAGN) %>%
summarise(count=n())
NYHA_classI_pat <- patiromer[patiromer$BLNYHA = 'Class I',]
NYHA_classI_pat <- patiromer[patiromer$BLNYHA == 'Class I',]
no_NYHA_classI_pat <- nrow(NYHA_classI_pat)
no_NYHA_classI_pat
NYHA_classI_pat <- patiromer[patiromer$BLNYHA == 'Class I',]
NYHA_classII_pat <- patiromer[patiromer$BLNYHA == 'Class II',]
NYHA_classIII_pat <- patiromer[patiromer$BLNYHA == 'Class III',]
no_NYHA_classI_pat <- nrow(NYHA_classI_pat)
no_NYHA_classII_pat <- nrow(NYHA_classII_pat)
no_NYHA_classIII_pat <- nrow(NYHA_classIII_pat)
NYHA_classI_plac <- placebo[placebo$BLNYHA == 'Class I',]
NYHA_classII_plac <- placebo[placebo$BLNYHA == 'Class II',]
NYHA_classIII_plac <- placebo[placebo$BLNYHA == 'Class III',]
no_NYHA_classI_plac <- nrow(NYHA_classI_plac)
no_NYHA_classII_plac <- nrow(NYHA_classII_plac)
no_NYHA_classIII_plac <- nrow(NYHA_classIII_plac)
serumK_pat <- patiromer[patiromer$CBASEK]
patiromer %>%
group_by(patiromer$CBASEK) %>%
summarise(count=n())
serumK_pat <- mean(patiromer$CBASEK)
serumK_pat
serumK_pat <- mean(patiromer$CBASEK, na.rm = TRUE)
serumK_pat
serumK_mean_pat <- mean(patiromer$CBASEK, na.rm = TRUE)
serumK_sd_pat <- sd(patiromer$CBASEK, na.rm = TRUE)
serumK_mean_plac <- mean(placebo$CBASEK, na.rm = TRUE)
serumK_sd_plac <- sd(placebo$CBASEK, na.rm = TRUE)
rm(serumK_pat)
patiromer %>%
group_by(patiromer$AFIBHIS, patiromer$AFIBHISN) %>%
summarise(count=n())
atFib_pat <- patiromer[patiromer$AFIBHISN == 1, ]
no_atFib_pat <- nrow(atFib_pat)
atFib_pat <- patiromer[patiromer$AFIBHISN == 1, ]
atFib_plac <- placebo[placebo$AFIBHISN == 1, ]
no_atFib_pat <- nrow(atFib_pat)
no_atFib_plac <- nrow(atFib_plac)
patiromer %>%
group_by(patiromer$patiromer$T2DMFL) %>%
summarise(count=n())
patiromer %>%
group_by(placebo$placebo$T2DMFL) %>%
summarise(count=n())
patiromer %>%
group_by(placebo$T2DMFL) %>%
summarise(count=n())
T2DM_pat <- patiromer[patiromer$T2DMFL]
T2DM_pat <- patiromer[patiromer$T2DMFL == Y,]
T2DM_pat <- patiromer[patiromer$T2DMFL == 'Y',]
T2DM_plac <- placebo[placebo$T2DMFL == 'Y', ]
no_T2DM_pat <- nrow(T2DM_pat)
no_T2DM_plac <- nrow(T2DM_plac)
hypK_pat <- patiromer[patiromer$HKHISTN ==1,]
no_hypK_pat <- nrow(hypK_pat)
no_hypK_pat <- nrow(hypK_pat)
no_hypK_plac <- nrow(hypK_plac)
hypK_plac <- placebo[placebo$HKHISTN ==1,]
no_hypK_plac <- nrow(hypK_plac)
normK_pat <- patiromer[patiromer$HKHISTN ==2,]
normK_plac <- placebo[placebo$HKHISTN ==2,]
no_normK_pat <- nrow(hypK_pat)
no_normK_plac <- nrow(hypK_plac)
MI_pat <- patiromer[patiromer$MYCINFRN]
MI_pat <- patiromer[patiromer$MYCINFRN ==1, ]
no_MI_pat <- nrow(MI_pat)
no_MI_pat
patiromer %>%
group_by(patiromer$MYCINFRN) %>%
summarise(count=n())
MI_pat
patiromer$MYCINFRN
patiromer[patiromer$MYCINFRN ==1, ]
patiromer[patiromer$HKHISTN ==2,]
patiromer[patiromer$MYCINFRN ==1, ]
no_MI_pat <- nrow(MI_pat)
no_MI_pat
patiromer %>%
group_by(patiromer$MYCINFRN) %>%
summarise(count=n())
patiromer %>%
group_by(patiromer$MYCINFRN==1) %>%
summarise(count=n())
MI_test <- patiromer %>%
group_by(patiromer$MYCINFRN==1) %>%
summarise(count=n())
MI_test[1,2]
MI_temp <- patiromer %>%
group_by(patiromer$MYCINFRN==1) %>%
summarise(count=n())
no_MI_pat <- MI_temp[1,1]
class(MI_pat)
no_MI_pat
no_MI_pat <- MI_temp[1,2]
no_MI_pat
patiromer %>%
group_by(patiromer$SCRARNI) %>%
summarise(count=n())
ARNi_pat <- patiromer[patiromer$SCRARNI == "Y",]
no_ARNi_pat <- nrow(ARNi_pat)
no_ARNi_pat
MRA_pat <- patiromer[patiromer$SCRMRA == "Y",]
no_MRA_pat <- nrow(MRA_pat)
no_MRA_pat
MI_pat <- patiromer[patiromer$MYCINFRN ==1, ]
no_MI_pat <- nrow(MI_pat)
no_MI_pat
MI_pat
patiromer$MYCINFRN ==1
MI_pat
library(tidyr)
?nrow
setwd("~/GitHub/ML-Projects")
load("~/GitHub/ML-Projects/NLP/.Rhistory")
load("~/GitHub/ML-Projects/.Rhistory")
load("~/GitHub/ML-Projects/NLP/.RData")
setwd("~/GitHub/ML-Projects/NLP")
